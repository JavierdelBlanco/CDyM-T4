
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00000940  000009d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001c0  008001c0  00000a94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001162  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9b  00000000  00000000  00001de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009bc  00000000  00000000  00002881  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00003240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000593  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000812  00000000  00000000  00003bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000043d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_18>
  4c:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3c       	cpi	r26, 0xC0	; 192
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ec       	ldi	r26, 0xC0	; 192
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3d       	cpi	r26, 0xDC	; 220
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  9e:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint8_t ADC_GetFlag(){
	return adc_flag;
}

void ADC_ClearFlag(){
	adc_flag=0;
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	87 60       	ori	r24, 0x07	; 7
  b4:	80 83       	st	Z, r24
  b6:	ac e7       	ldi	r26, 0x7C	; 124
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	8c 91       	ld	r24, X
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	8c 93       	st	X, r24
  c0:	8c 91       	ld	r24, X
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	8c 93       	st	X, r24
  c6:	ae e7       	ldi	r26, 0x7E	; 126
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	8c 91       	ld	r24, X
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	8c 93       	st	X, r24
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <ADC_Read>:
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <ADC_GetFlag>:
  e4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end>
  e8:	08 95       	ret

000000ea <ADC_GetBrillo>:
}

uint16_t ADC_GetBrillo(){
	return lectura;
  ea:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <lectura>
  ee:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <lectura+0x1>
}
  f2:	08 95       	ret

000000f4 <__vector_21>:

/*Conversion complete ISR*/
ISR(ADC_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	uint8_t adcl = 0;
	uint8_t adch = 0;
	
	adcl = ADCL;
 104:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	adch = ADCH;
 108:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	lectura = (adch<<8 | adcl);
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	98 2f       	mov	r25, r24
 110:	88 27       	eor	r24, r24
 112:	82 2b       	or	r24, r18
 114:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <lectura+0x1>
 118:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <lectura>
	
	adc_flag=1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <Validar_Valor>:
	}
}

// Función para validar el valor ingresado
static int Validar_Valor(char command[])
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
	int digitos = strlen(command); // Obtiene la longitud del comando
 138:	dc 01       	movw	r26, r24
 13a:	0d 90       	ld	r0, X+
 13c:	00 20       	and	r0, r0
 13e:	e9 f7       	brne	.-6      	; 0x13a <Validar_Valor+0x8>
 140:	11 97       	sbiw	r26, 0x01	; 1
 142:	a8 1b       	sub	r26, r24
 144:	b9 0b       	sbc	r27, r25
	int valor = 0; // Inicializa el valor a 0

	// Valida si el valor tiene más de 3 dígitos o no tiene ninguno
	if ((digitos > 3) | (digitos == 0)){
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	a4 30       	cpi	r26, 0x04	; 4
 14a:	b1 05       	cpc	r27, r1
 14c:	0c f4       	brge	.+2      	; 0x150 <Validar_Valor+0x1e>
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	10 97       	sbiw	r26, 0x00	; 0
 154:	09 f0       	breq	.+2      	; 0x158 <Validar_Valor+0x26>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	89 2b       	or	r24, r25
 15a:	49 f5       	brne	.+82     	; 0x1ae <Validar_Valor+0x7c>
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	1a c0       	rjmp	.+52     	; 0x19a <Validar_Valor+0x68>

	// Recorre cada dígito del comando
	for (int i = 0; i < digitos; i++)
	{
		// Verifica si cada carácter es un dígito válido
		if ((command[i] > '9') | (command[i] < '0'))
 166:	fe 01       	movw	r30, r28
 168:	e6 0f       	add	r30, r22
 16a:	f7 1f       	adc	r31, r23
 16c:	40 81       	ld	r20, Z
 16e:	90 ed       	ldi	r25, 0xD0	; 208
 170:	94 0f       	add	r25, r20
 172:	9a 30       	cpi	r25, 0x0A	; 10
 174:	f8 f4       	brcc	.+62     	; 0x1b4 <Validar_Valor+0x82>
		{
			return -1; // Si no es un dígito válido, devuelve -1
		}
		valor = valor * 10; // Desplaza el valor a la izquierda
 176:	c9 01       	movw	r24, r18
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	22 0f       	add	r18, r18
 182:	33 1f       	adc	r19, r19
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	28 0f       	add	r18, r24
 18a:	39 1f       	adc	r19, r25
		valor += command[i] - '0'; // Agrega el dígito actual al valor
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	40 53       	subi	r20, 0x30	; 48
 190:	51 09       	sbc	r21, r1
 192:	24 0f       	add	r18, r20
 194:	35 1f       	adc	r19, r21
	if ((digitos > 3) | (digitos == 0)){
		return -1; // Si es así, devuelve -1
	}

	// Recorre cada dígito del comando
	for (int i = 0; i < digitos; i++)
 196:	6f 5f       	subi	r22, 0xFF	; 255
 198:	7f 4f       	sbci	r23, 0xFF	; 255
 19a:	6a 17       	cp	r22, r26
 19c:	7b 07       	cpc	r23, r27
 19e:	1c f3       	brlt	.-58     	; 0x166 <Validar_Valor+0x34>
		}
		valor = valor * 10; // Desplaza el valor a la izquierda
		valor += command[i] - '0'; // Agrega el dígito actual al valor
	}
	// Verifica si el valor es mayor de 255
	if (valor > 255)
 1a0:	2f 3f       	cpi	r18, 0xFF	; 255
 1a2:	31 05       	cpc	r19, r1
 1a4:	51 f0       	breq	.+20     	; 0x1ba <Validar_Valor+0x88>
 1a6:	4c f0       	brlt	.+18     	; 0x1ba <Validar_Valor+0x88>
	{
		return -1; // Si es mayor de 255, devuelve -1
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	9f ef       	ldi	r25, 0xFF	; 255
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <Validar_Valor+0x8c>
	int digitos = strlen(command); // Obtiene la longitud del comando
	int valor = 0; // Inicializa el valor a 0

	// Valida si el valor tiene más de 3 dígitos o no tiene ninguno
	if ((digitos > 3) | (digitos == 0)){
		return -1; // Si es así, devuelve -1
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	9f ef       	ldi	r25, 0xFF	; 255
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <Validar_Valor+0x8c>
	for (int i = 0; i < digitos; i++)
	{
		// Verifica si cada carácter es un dígito válido
		if ((command[i] > '9') | (command[i] < '0'))
		{
			return -1; // Si no es un dígito válido, devuelve -1
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	9f ef       	ldi	r25, 0xFF	; 255
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <Validar_Valor+0x8c>
	if (valor > 255)
	{
		return -1; // Si es mayor de 255, devuelve -1
	}

	return valor; // Devuelve el valor válido
 1ba:	82 2f       	mov	r24, r18
 1bc:	93 2f       	mov	r25, r19
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <Validar_Color>:
	UART_SendMsg(inicio); // Enviar mensaje de bienvenida a través de UART
}

// Función para validar el color ingresado
static char Validar_Color(char command[])
{
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
	// Verifica que el comando sea 'R', 'G' o 'B'
	if (!strcmp(command, "R") | !strcmp(command, "G") | !strcmp(command, "B"))
 1d0:	69 eb       	ldi	r22, 0xB9	; 185
 1d2:	71 e0       	ldi	r23, 0x01	; 1
 1d4:	0e 94 8e 04 	call	0x91c	; 0x91c <strcmp>
 1d8:	7c 01       	movw	r14, r24
 1da:	6b eb       	ldi	r22, 0xBB	; 187
 1dc:	71 e0       	ldi	r23, 0x01	; 1
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 8e 04 	call	0x91c	; 0x91c <strcmp>
 1e4:	9c 01       	movw	r18, r24
 1e6:	11 e0       	ldi	r17, 0x01	; 1
 1e8:	ef 28       	or	r14, r15
 1ea:	09 f0       	breq	.+2      	; 0x1ee <Validar_Color+0x2a>
 1ec:	10 e0       	ldi	r17, 0x00	; 0
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	23 2b       	or	r18, r19
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <Validar_Color+0x32>
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	19 2b       	or	r17, r25
 1f8:	6d eb       	ldi	r22, 0xBD	; 189
 1fa:	71 e0       	ldi	r23, 0x01	; 1
 1fc:	ce 01       	movw	r24, r28
 1fe:	0e 94 8e 04 	call	0x91c	; 0x91c <strcmp>
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	89 2b       	or	r24, r25
 206:	09 f0       	breq	.+2      	; 0x20a <Validar_Color+0x46>
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	11 11       	cpse	r17, r1
 20c:	02 c0       	rjmp	.+4      	; 0x212 <Validar_Color+0x4e>
 20e:	22 23       	and	r18, r18
 210:	11 f0       	breq	.+4      	; 0x216 <Validar_Color+0x52>
	{
		return command[0]; // Si es válido, devuelve el carácter del comando
 212:	88 81       	ld	r24, Y
 214:	01 c0       	rjmp	.+2      	; 0x218 <Validar_Color+0x54>
	}
	else
	{
		return 0; // Si no es válido, devuelve 0
 216:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	08 95       	ret

00000224 <CLI_Init>:
static char valor_invalido[] = "\rEl valor ingresado es invalido\r"; // Mensaje para indicar valor inválido

// Función de inicialización del CLI (Interfaz de Línea de Comandos)
void CLI_Init()
{
	UART_SendMsg(inicio); // Enviar mensaje de bienvenida a través de UART
 224:	8b e8       	ldi	r24, 0x8B	; 139
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 ce 02 	call	0x59c	; 0x59c <UART_SendMsg>
 22c:	08 95       	ret

0000022e <CLI_cmd>:

// Función para manejar comandos del CLI
void CLI_cmd(char command[])
{
	// Si ya se ha seleccionado un color, asigna el valor al mismo
	if (colorFlag)
 22e:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <colorFlag>
 232:	22 23       	and	r18, r18
 234:	19 f1       	breq	.+70     	; 0x27c <CLI_cmd+0x4e>
	{
		int valor = Validar_Valor(command); // Valida el valor ingresado
 236:	0e 94 99 00 	call	0x132	; 0x132 <Validar_Valor>
 23a:	9c 01       	movw	r18, r24
		if (valor != -1)
 23c:	2f 3f       	cpi	r18, 0xFF	; 255
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	38 07       	cpc	r19, r24
 242:	b9 f0       	breq	.+46     	; 0x272 <CLI_cmd+0x44>
		{
			colorFlag = 0; // Resetea la bandera de color
 244:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <colorFlag>
			// Asigna el valor al color correspondiente
			switch (color)
 248:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <color>
 24c:	97 34       	cpi	r25, 0x47	; 71
 24e:	49 f0       	breq	.+18     	; 0x262 <CLI_cmd+0x34>
 250:	92 35       	cpi	r25, 0x52	; 82
 252:	19 f0       	breq	.+6      	; 0x25a <CLI_cmd+0x2c>
 254:	92 34       	cpi	r25, 0x42	; 66
 256:	21 f5       	brne	.+72     	; 0x2a0 <CLI_cmd+0x72>
 258:	08 c0       	rjmp	.+16     	; 0x26a <CLI_cmd+0x3c>
			{
			case 'R':
				PWM_SetRed(valor);
 25a:	82 2f       	mov	r24, r18
 25c:	0e 94 3d 02 	call	0x47a	; 0x47a <PWM_SetRed>
				break;
 260:	08 95       	ret
			case 'G':
				PWM_SetGreen(valor);
 262:	82 2f       	mov	r24, r18
 264:	0e 94 09 02 	call	0x412	; 0x412 <PWM_SetGreen>
				break;
 268:	08 95       	ret
			case 'B':
				PWM_SetBlue(valor);
 26a:	82 2f       	mov	r24, r18
 26c:	0e 94 23 02 	call	0x446	; 0x446 <PWM_SetBlue>
				break;
 270:	08 95       	ret
			}
		}
		else
		{
			UART_SendMsg(valor_invalido); // Envia mensaje de valor inválido
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 ce 02 	call	0x59c	; 0x59c <UART_SendMsg>
 27a:	08 95       	ret
		}
	}
	// Si no se ha seleccionado un color, lo valida
	else
	{
		char c = Validar_Color(command); // Valida el color ingresado
 27c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Validar_Color>
		if (c){
 280:	88 23       	and	r24, r24
 282:	51 f0       	breq	.+20     	; 0x298 <CLI_cmd+0x6a>
			color = c; // Asigna el color válido
 284:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <color>
			colorFlag = 1; // Activa el flag de color
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <colorFlag>
			UART_SendMsg(valor); // Solicita el valor de intensidad
 28e:	82 e4       	ldi	r24, 0x42	; 66
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 ce 02 	call	0x59c	; 0x59c <UART_SendMsg>
 296:	08 95       	ret
		}
		else
		{
			UART_SendMsg(color_invalido); // Envia mensaje de color inválido
 298:	81 e2       	ldi	r24, 0x21	; 33
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 ce 02 	call	0x59c	; 0x59c <UART_SendMsg>
 2a0:	08 95       	ret

000002a2 <main>:
#define VERDE PB2
#define AZUL PB1

int main(void)
{
	DDRB |= 1<<ROJO | 1<< VERDE | 1 << AZUL; //Establezco los pines del verde y el azul como salidas
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	86 62       	ori	r24, 0x26	; 38
 2a6:	84 b9       	out	0x04, r24	; 4
	UART_Init(); //Inicializo el uart
 2a8:	0e 94 c0 02 	call	0x580	; 0x580 <UART_Init>
	CLI_Init(); //Inicializo la terminal
 2ac:	0e 94 12 01 	call	0x224	; 0x224 <CLI_Init>
	PWM_Init(); //Inicializo as señales PWM
 2b0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <PWM_Init>
	ADC_Init(); //Inicializa el ADC
 2b4:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	sei();
 2b8:	78 94       	sei

	while (1)
	{
		if (UART_GetCmdFlag()) //veifica si se envio el valor del color por la teminal
 2ba:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_GetCmdFlag>
 2be:	88 23       	and	r24, r24
 2c0:	41 f0       	breq	.+16     	; 0x2d2 <main+0x30>
		{
			UART_ClearCmdFlag(); //limpio el flag de la uart
 2c2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <UART_ClearCmdFlag>
			CLI_cmd(UART_ReadBuffer()); //Se lee el dato del color enviado a traves del uart (letra del color o intensidad)
 2c6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <UART_ReadBuffer>
 2ca:	0e 94 17 01 	call	0x22e	; 0x22e <CLI_cmd>
			UART_Enable_Rx(); //habilito a la uart para recibir infomacion
 2ce:	0e 94 ae 02 	call	0x55c	; 0x55c <UART_Enable_Rx>
			
		}
		ADC_Read(); //Leer el valor del brillo
 2d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <ADC_Read>
		if(ADC_GetFlag()){ //si ya se leyo el valor del brillo
 2d6:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_GetFlag>
 2da:	88 23       	and	r24, r24
 2dc:	71 f3       	breq	.-36     	; 0x2ba <main+0x18>
			PWM_SetBrillo(ADC_GetBrillo()); //asigno el brillo a los colores
 2de:	0e 94 75 00 	call	0xea	; 0xea <ADC_GetBrillo>
 2e2:	0e 94 00 02 	call	0x400	; 0x400 <PWM_SetBrillo>
 2e6:	e9 cf       	rjmp	.-46     	; 0x2ba <main+0x18>

000002e8 <Timer1_Init>:
static void Timer1_Init();

static void Timer1_Init()
{
	// Configura los pines OC1A y OC1B para modo comparador inverso (PWM)
	TCCR1A |= (1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (1 << COM1B0);
 2e8:	e0 e8       	ldi	r30, 0x80	; 128
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	80 6f       	ori	r24, 0xF0	; 240
 2f0:	80 83       	st	Z, r24
	
	// Modo de generación de onda: Fast PWM, 8 bits
	TCCR1A |= (1 << WGM10);
 2f2:	80 81       	ld	r24, Z
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
 2f8:	e1 e8       	ldi	r30, 0x81	; 129
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	88 60       	ori	r24, 0x08	; 8
 300:	80 83       	st	Z, r24
	
	// Prescaler de 1024 para una frecuencia de 62Hz
	TCCR1B |= (1 << CS12) | (1 << CS10);
 302:	80 81       	ld	r24, Z
 304:	85 60       	ori	r24, 0x05	; 5
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <Timer0_Init>:
}

static void Timer0_Init()
{	
	//Interrupciones de compare match y overflow
	TIMSK0 |= (1<<OCIE0A) | (1<<TOIE0);
 30a:	ee e6       	ldi	r30, 0x6E	; 110
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	83 60       	ori	r24, 0x03	; 3
 312:	80 83       	st	Z, r24
	// Prescaler de 1024 para una frecuencia de 62Hz
	TCCR0B |= (1 << CS00) | (1 << CS02);
 314:	85 b5       	in	r24, 0x25	; 37
 316:	85 60       	ori	r24, 0x05	; 5
 318:	85 bd       	out	0x25, r24	; 37
 31a:	08 95       	ret

0000031c <PWM_Green>:
	Timer0_Init();
}

// Función para ajustar el valor de PWM del LED verde basado en el brillo
static void PWM_Green()
{
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	cf 93       	push	r28
	float aux = g * (brillo/1024.0);
 326:	c0 91 b7 01 	lds	r28, 0x01B7	; 0x8001b7 <g>
 32a:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <brillo>
 32e:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <brillo+0x1>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 93 03 	call	0x726	; 0x726 <__floatunsisf>
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e8       	ldi	r20, 0x80	; 128
 340:	5a e3       	ldi	r21, 0x3A	; 58
 342:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__mulsf3>
 346:	6b 01       	movw	r12, r22
 348:	7c 01       	movw	r14, r24
 34a:	6c 2f       	mov	r22, r28
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 95 03 	call	0x72a	; 0x72a <__floatsisf>
 356:	a7 01       	movw	r20, r14
 358:	96 01       	movw	r18, r12
 35a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__mulsf3>
	OCR1B = (uint8_t) aux;
 35e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fixunssfsi>
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 368:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 36c:	cf 91       	pop	r28
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	df 90       	pop	r13
 374:	cf 90       	pop	r12
 376:	08 95       	ret

00000378 <PWM_Blue>:

// Función para ajustar el valor de PWM del LED azul basado en el brillo
static void PWM_Blue()
{
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	cf 93       	push	r28
	float aux = b * (brillo/1024.0);
 382:	c0 91 b6 01 	lds	r28, 0x01B6	; 0x8001b6 <b>
 386:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <brillo>
 38a:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <brillo+0x1>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 93 03 	call	0x726	; 0x726 <__floatunsisf>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	40 e8       	ldi	r20, 0x80	; 128
 39c:	5a e3       	ldi	r21, 0x3A	; 58
 39e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__mulsf3>
 3a2:	6b 01       	movw	r12, r22
 3a4:	7c 01       	movw	r14, r24
 3a6:	6c 2f       	mov	r22, r28
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 95 03 	call	0x72a	; 0x72a <__floatsisf>
 3b2:	a7 01       	movw	r20, r14
 3b4:	96 01       	movw	r18, r12
 3b6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__mulsf3>
	OCR1A = (uint8_t) aux;
 3ba:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fixunssfsi>
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3c4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 3c8:	cf 91       	pop	r28
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	cf 90       	pop	r12
 3d2:	08 95       	ret

000003d4 <PWM_Init>:
	TCCR0B |= (1 << CS00) | (1 << CS02);
}

void PWM_Init()
{
	OCR0A = r;  // Inicializa el valor de comparación de Timer0 para el rojo
 3d4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <r>
 3d8:	87 bd       	out	0x27, r24	; 39
	OCR1B = g;  // Inicializa el valor de comparación de Timer1 para el verde
 3da:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <g>
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3e4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = b;  // Inicializa el valor de comparación de Timer1 para el azul
 3e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <b>
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	Timer1_Init();
 3f6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Timer1_Init>
	Timer0_Init();
 3fa:	0e 94 85 01 	call	0x30a	; 0x30a <Timer0_Init>
 3fe:	08 95       	ret

00000400 <PWM_SetBrillo>:
	OCR1A = (uint8_t) aux;
}

// Función para ajustar el brillo general de los LEDs
void PWM_SetBrillo(uint16_t b){
	brillo = b;	
 400:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <brillo+0x1>
 404:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <brillo>
	
	PWM_Green();
 408:	0e 94 8e 01 	call	0x31c	; 0x31c <PWM_Green>
	PWM_Blue();
 40c:	0e 94 bc 01 	call	0x378	; 0x378 <PWM_Blue>
 410:	08 95       	ret

00000412 <PWM_SetGreen>:
}

// Función para ajustar el color del LED azul
void PWM_SetGreen(uint8_t color){
	g=color;
 412:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <g>
	if (g>0){
 416:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <g>
 41a:	88 23       	and	r24, r24
 41c:	41 f0       	breq	.+16     	; 0x42e <PWM_SetGreen+0x1c>
		TCCR1A |= (1 << COM1B1) | (1 << COM1B0); // Habilita PWM en OC1B
 41e:	e0 e8       	ldi	r30, 0x80	; 128
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	80 63       	ori	r24, 0x30	; 48
 426:	80 83       	st	Z, r24
		PWM_Green();
 428:	0e 94 8e 01 	call	0x31c	; 0x31c <PWM_Green>
 42c:	08 95       	ret
		}
	else{
		TCCR1A &= ~(1 << COM1B1);
 42e:	e0 e8       	ldi	r30, 0x80	; 128
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	8f 7d       	andi	r24, 0xDF	; 223
 436:	80 83       	st	Z, r24
		TCCR1A &= ~(1 << COM1B0);  // Deshabilita PWM en OC1B
 438:	80 81       	ld	r24, Z
 43a:	8f 7e       	andi	r24, 0xEF	; 239
 43c:	80 83       	st	Z, r24
		PORTB |= 1 << PORTB2;      // Apaga el LED verde
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	84 60       	ori	r24, 0x04	; 4
 442:	85 b9       	out	0x05, r24	; 5
 444:	08 95       	ret

00000446 <PWM_SetBlue>:
	
}

// Función para ajustar el color del LED azul
void PWM_SetBlue(uint8_t color){
	b=color;
 446:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <b>
	if (b>0){
 44a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <b>
 44e:	88 23       	and	r24, r24
 450:	41 f0       	breq	.+16     	; 0x462 <PWM_SetBlue+0x1c>
		TCCR1A |= (1 << COM1A1) | (1 << COM1A0);  // Habilita PWM en OC1A
 452:	e0 e8       	ldi	r30, 0x80	; 128
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	80 6c       	ori	r24, 0xC0	; 192
 45a:	80 83       	st	Z, r24
		PWM_Blue();
 45c:	0e 94 bc 01 	call	0x378	; 0x378 <PWM_Blue>
 460:	08 95       	ret
	} else {
		TCCR1A &= ~(1 << COM1A1);
 462:	e0 e8       	ldi	r30, 0x80	; 128
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	8f 77       	andi	r24, 0x7F	; 127
 46a:	80 83       	st	Z, r24
		TCCR1A &= ~(1 << COM1A0);  // Deshabilita PWM en OC1A
 46c:	80 81       	ld	r24, Z
 46e:	8f 7b       	andi	r24, 0xBF	; 191
 470:	80 83       	st	Z, r24
		PORTB |= 1 << PORTB1;      // Apaga el LED azul
 472:	85 b1       	in	r24, 0x05	; 5
 474:	82 60       	ori	r24, 0x02	; 2
 476:	85 b9       	out	0x05, r24	; 5
 478:	08 95       	ret

0000047a <PWM_SetRed>:
	}
}

// Función para ajustar el color del LED rojo
void PWM_SetRed(uint8_t color){
	r=color;
 47a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <r>
	if (r>0){
 47e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <r>
 482:	88 23       	and	r24, r24
 484:	19 f0       	breq	.+6      	; 0x48c <PWM_SetRed+0x12>
		Timer0_Init();  // Inicializa Timer0 si el color es mayor que 0;
 486:	0e 94 85 01 	call	0x30a	; 0x30a <Timer0_Init>
 48a:	08 95       	ret
	}else{
		TCCR0B = 0;     // Detiene Timer0
 48c:	15 bc       	out	0x25, r1	; 37
		PORTB |= 1 << PORTB5;  // Apaga el LED rojo
 48e:	85 b1       	in	r24, 0x05	; 5
 490:	80 62       	ori	r24, 0x20	; 32
 492:	85 b9       	out	0x05, r24	; 5
 494:	08 95       	ret

00000496 <__vector_16>:
	}
	
}

// ISR para manejar el overflow del Timer0
ISR(TIMER0_OVF_vect){
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	2f 93       	push	r18
 4aa:	3f 93       	push	r19
 4ac:	4f 93       	push	r20
 4ae:	5f 93       	push	r21
 4b0:	6f 93       	push	r22
 4b2:	7f 93       	push	r23
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	af 93       	push	r26
 4ba:	bf 93       	push	r27
 4bc:	cf 93       	push	r28
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	float aux = r * (brillo/1024.0);
 4c2:	c0 91 b8 01 	lds	r28, 0x01B8	; 0x8001b8 <r>
 4c6:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <brillo>
 4ca:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <brillo+0x1>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 93 03 	call	0x726	; 0x726 <__floatunsisf>
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	40 e8       	ldi	r20, 0x80	; 128
 4dc:	5a e3       	ldi	r21, 0x3A	; 58
 4de:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__mulsf3>
 4e2:	6b 01       	movw	r12, r22
 4e4:	7c 01       	movw	r14, r24
 4e6:	6c 2f       	mov	r22, r28
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 95 03 	call	0x72a	; 0x72a <__floatsisf>
 4f2:	a7 01       	movw	r20, r14
 4f4:	96 01       	movw	r18, r12
 4f6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__mulsf3>
	OCR0A = (uint8_t) aux;  // Ajusta el valor de OCR0A basado en el brillo
 4fa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fixunssfsi>
 4fe:	67 bd       	out	0x27, r22	; 39
	PORTB &= ~(1 << ROJO);  // Apaga el LED rojo
 500:	85 b1       	in	r24, 0x05	; 5
 502:	8f 7d       	andi	r24, 0xDF	; 223
 504:	85 b9       	out	0x05, r24	; 5
}
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	cf 91       	pop	r28
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <__vector_14>:

// ISR para manejar la coincidencia  de comparación del Timer0
ISR(TIMER0_COMPA_vect)
{
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	8f 93       	push	r24
	PORTB |= (1<<ROJO); // Enciende el LED rojo
 53e:	85 b1       	in	r24, 0x05	; 5
 540:	80 62       	ori	r24, 0x20	; 32
 542:	85 b9       	out	0x05, r24	; 5
}
 544:	8f 91       	pop	r24
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <UART_Disable_Rx>:
/*
 * Control de interrupciones de transmision y recepcion
 */
void UART_Disable_Rx()
{
	UCSR0B &= ~(1 << RXCIE0);
 550:	e1 ec       	ldi	r30, 0xC1	; 193
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	8f 77       	andi	r24, 0x7F	; 127
 558:	80 83       	st	Z, r24
 55a:	08 95       	ret

0000055c <UART_Enable_Rx>:
}

void UART_Enable_Rx()
{
	UCSR0B |= (1 << RXCIE0);
 55c:	e1 ec       	ldi	r30, 0xC1	; 193
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	80 68       	ori	r24, 0x80	; 128
 564:	80 83       	st	Z, r24
 566:	08 95       	ret

00000568 <UART_Disable_Tx>:
}

void UART_Disable_Tx()
{
	UCSR0B &= ~(1 << UDRIE0);
 568:	e1 ec       	ldi	r30, 0xC1	; 193
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	8f 7d       	andi	r24, 0xDF	; 223
 570:	80 83       	st	Z, r24
 572:	08 95       	ret

00000574 <UART_Enable_Tx>:
}

void UART_Enable_Tx()
{
	UCSR0B |= (1 << UDRIE0);
 574:	e1 ec       	ldi	r30, 0xC1	; 193
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	80 62       	ori	r24, 0x20	; 32
 57c:	80 83       	st	Z, r24
 57e:	08 95       	ret

00000580 <UART_Init>:
uint8_t cmd_flag = 0;

void UART_Init()
{
	// Establecer baud rate
	UBRR0L = BAUD_PRESCALER;  //103, pero el numero calculado no es un numero entera ya que posee decimales, por lo que habra un pequeño error y no sera exactamente 9600 bps
 580:	87 e6       	ldi	r24, 0x67	; 103
 582:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Establecer formato de trama
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 586:	86 e0       	ldi	r24, 0x06	; 6
 588:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	/*Permitir que la USART sobreescriba la operacion normal en los pines TX y RX*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 58c:	88 e1       	ldi	r24, 0x18	; 24
 58e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Activar interrupciones para la recepcion
	UART_Enable_Rx();
 592:	0e 94 ae 02 	call	0x55c	; 0x55c <UART_Enable_Rx>
	UART_Enable_Tx();
 596:	0e 94 ba 02 	call	0x574	; 0x574 <UART_Enable_Tx>
 59a:	08 95       	ret

0000059c <UART_SendMsg>:
	UCSR0B |= (1 << UDRIE0);
}

void UART_SendMsg(char *msg)
{
	strcpy(buffer_tx, msg);
 59c:	bc 01       	movw	r22, r24
 59e:	82 ed       	ldi	r24, 0xD2	; 210
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	0e 94 97 04 	call	0x92e	; 0x92e <strcpy>
	UART_Enable_Tx();
 5a6:	0e 94 ba 02 	call	0x574	; 0x574 <UART_Enable_Tx>
 5aa:	08 95       	ret

000005ac <UART_ReadBuffer>:
}

char *UART_ReadBuffer()
{
	return buffer_rx;
}
 5ac:	88 ec       	ldi	r24, 0xC8	; 200
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	08 95       	ret

000005b2 <UART_GetCmdFlag>:

uint8_t UART_GetCmdFlag()
{
	return cmd_flag;
}
 5b2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <cmd_flag>
 5b6:	08 95       	ret

000005b8 <UART_ClearCmdFlag>:

void UART_ClearCmdFlag()
{
	cmd_flag = 0;
 5b8:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <cmd_flag>
 5bc:	08 95       	ret

000005be <__vector_18>:
/*
 * Interrupcion de recepcion
 * Disparada por la UART cuando hay un nuevo dato en UDR0 listo para ser leido
 */
ISR(USART_RX_vect)
{
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
 5c8:	2f 93       	push	r18
 5ca:	3f 93       	push	r19
 5cc:	4f 93       	push	r20
 5ce:	5f 93       	push	r21
 5d0:	6f 93       	push	r22
 5d2:	7f 93       	push	r23
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
 5d8:	af 93       	push	r26
 5da:	bf 93       	push	r27
 5dc:	ef 93       	push	r30
 5de:	ff 93       	push	r31
	static volatile uint8_t i = 0;
	unsigned char dato;

	dato = UDR0;
 5e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	/* Detectar fin de linea */
	if (dato == '\r')
 5e4:	8d 30       	cpi	r24, 0x0D	; 13
 5e6:	71 f4       	brne	.+28     	; 0x604 <__vector_18+0x46>
	{
		buffer_rx[i] = '\0';
 5e8:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <i.2258>
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	e8 53       	subi	r30, 0x38	; 56
 5f0:	fe 4f       	sbci	r31, 0xFE	; 254
 5f2:	10 82       	st	Z, r1
		i = 0;
 5f4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <i.2258>
		cmd_flag = 1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <cmd_flag>
		UART_Disable_Rx();
 5fe:	0e 94 a8 02 	call	0x550	; 0x550 <UART_Disable_Rx>
 602:	13 c0       	rjmp	.+38     	; 0x62a <__vector_18+0x6c>
	}
	/* Detectar borrado de caracter */
	else
	{
		if (dato == '\b')
 604:	88 30       	cpi	r24, 0x08	; 8
 606:	31 f4       	brne	.+12     	; 0x614 <__vector_18+0x56>
			i--;
 608:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <i.2258>
 60c:	81 50       	subi	r24, 0x01	; 1
 60e:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <i.2258>
 612:	0b c0       	rjmp	.+22     	; 0x62a <__vector_18+0x6c>
		else
		{
			buffer_rx[i] = dato;
 614:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <i.2258>
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	e8 53       	subi	r30, 0x38	; 56
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	80 83       	st	Z, r24
			i++;
 620:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <i.2258>
 624:	8f 5f       	subi	r24, 0xFF	; 255
 626:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <i.2258>
		}
	}
}
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	7f 91       	pop	r23
 638:	6f 91       	pop	r22
 63a:	5f 91       	pop	r21
 63c:	4f 91       	pop	r20
 63e:	3f 91       	pop	r19
 640:	2f 91       	pop	r18
 642:	0f 90       	pop	r0
 644:	0f be       	out	0x3f, r0	; 63
 646:	0f 90       	pop	r0
 648:	1f 90       	pop	r1
 64a:	18 95       	reti

0000064c <__vector_19>:
* datos que aún no han sido movidos al registro de desplazamiento para ser transmitidos.

* Cargo el caracter de mensaje a enviar hasta alcanzar el fin del mensaje
*/
ISR(USART_UDRE_vect)
{
 64c:	1f 92       	push	r1
 64e:	0f 92       	push	r0
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	0f 92       	push	r0
 654:	11 24       	eor	r1, r1
 656:	2f 93       	push	r18
 658:	3f 93       	push	r19
 65a:	4f 93       	push	r20
 65c:	5f 93       	push	r21
 65e:	6f 93       	push	r22
 660:	7f 93       	push	r23
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
 666:	af 93       	push	r26
 668:	bf 93       	push	r27
 66a:	ef 93       	push	r30
 66c:	ff 93       	push	r31
	cli();//Se desabilitan las interrupciones
 66e:	f8 94       	cli
	static volatile uint8_t i = 0;
	if (buffer_tx[i] != '\0')
 670:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <i.2265>
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	ee 52       	subi	r30, 0x2E	; 46
 678:	fe 4f       	sbci	r31, 0xFE	; 254
 67a:	80 81       	ld	r24, Z
 67c:	88 23       	and	r24, r24
 67e:	71 f0       	breq	.+28     	; 0x69c <__vector_19+0x50>
	{
		UDR0 = buffer_tx[i]; //Guardo el caracter del buffer de transmision en el registro de datos
 680:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <i.2265>
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	ee 52       	subi	r30, 0x2E	; 46
 688:	fe 4f       	sbci	r31, 0xFE	; 254
 68a:	80 81       	ld	r24, Z
 68c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		i++;
 690:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <i.2265>
 694:	8f 5f       	subi	r24, 0xFF	; 255
 696:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <i.2265>
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__vector_19+0x58>
	}
	else
	{
		i = 0;
 69c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <i.2265>
		UART_Disable_Tx();//Es necesario desactivar las interrupciones para evitar que se produzca otra interrupcion cuando sea leido ya que no se vacio UDR0
 6a0:	0e 94 b4 02 	call	0x568	; 0x568 <UART_Disable_Tx>
	}
	sei();//Se habilitan las interrupciones
 6a4:	78 94       	sei
 6a6:	ff 91       	pop	r31
 6a8:	ef 91       	pop	r30
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	7f 91       	pop	r23
 6b4:	6f 91       	pop	r22
 6b6:	5f 91       	pop	r21
 6b8:	4f 91       	pop	r20
 6ba:	3f 91       	pop	r19
 6bc:	2f 91       	pop	r18
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <__fixunssfsi>:
 6c8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_splitA>
 6cc:	88 f0       	brcs	.+34     	; 0x6f0 <__fixunssfsi+0x28>
 6ce:	9f 57       	subi	r25, 0x7F	; 127
 6d0:	98 f0       	brcs	.+38     	; 0x6f8 <__fixunssfsi+0x30>
 6d2:	b9 2f       	mov	r27, r25
 6d4:	99 27       	eor	r25, r25
 6d6:	b7 51       	subi	r27, 0x17	; 23
 6d8:	b0 f0       	brcs	.+44     	; 0x706 <__fixunssfsi+0x3e>
 6da:	e1 f0       	breq	.+56     	; 0x714 <__fixunssfsi+0x4c>
 6dc:	66 0f       	add	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	88 1f       	adc	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	1a f0       	brmi	.+6      	; 0x6ec <__fixunssfsi+0x24>
 6e6:	ba 95       	dec	r27
 6e8:	c9 f7       	brne	.-14     	; 0x6dc <__fixunssfsi+0x14>
 6ea:	14 c0       	rjmp	.+40     	; 0x714 <__fixunssfsi+0x4c>
 6ec:	b1 30       	cpi	r27, 0x01	; 1
 6ee:	91 f0       	breq	.+36     	; 0x714 <__fixunssfsi+0x4c>
 6f0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_zero>
 6f4:	b1 e0       	ldi	r27, 0x01	; 1
 6f6:	08 95       	ret
 6f8:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__fp_zero>
 6fc:	67 2f       	mov	r22, r23
 6fe:	78 2f       	mov	r23, r24
 700:	88 27       	eor	r24, r24
 702:	b8 5f       	subi	r27, 0xF8	; 248
 704:	39 f0       	breq	.+14     	; 0x714 <__fixunssfsi+0x4c>
 706:	b9 3f       	cpi	r27, 0xF9	; 249
 708:	cc f3       	brlt	.-14     	; 0x6fc <__fixunssfsi+0x34>
 70a:	86 95       	lsr	r24
 70c:	77 95       	ror	r23
 70e:	67 95       	ror	r22
 710:	b3 95       	inc	r27
 712:	d9 f7       	brne	.-10     	; 0x70a <__fixunssfsi+0x42>
 714:	3e f4       	brtc	.+14     	; 0x724 <__fixunssfsi+0x5c>
 716:	90 95       	com	r25
 718:	80 95       	com	r24
 71a:	70 95       	com	r23
 71c:	61 95       	neg	r22
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	8f 4f       	sbci	r24, 0xFF	; 255
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	08 95       	ret

00000726 <__floatunsisf>:
 726:	e8 94       	clt
 728:	09 c0       	rjmp	.+18     	; 0x73c <__floatsisf+0x12>

0000072a <__floatsisf>:
 72a:	97 fb       	bst	r25, 7
 72c:	3e f4       	brtc	.+14     	; 0x73c <__floatsisf+0x12>
 72e:	90 95       	com	r25
 730:	80 95       	com	r24
 732:	70 95       	com	r23
 734:	61 95       	neg	r22
 736:	7f 4f       	sbci	r23, 0xFF	; 255
 738:	8f 4f       	sbci	r24, 0xFF	; 255
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	99 23       	and	r25, r25
 73e:	a9 f0       	breq	.+42     	; 0x76a <__floatsisf+0x40>
 740:	f9 2f       	mov	r31, r25
 742:	96 e9       	ldi	r25, 0x96	; 150
 744:	bb 27       	eor	r27, r27
 746:	93 95       	inc	r25
 748:	f6 95       	lsr	r31
 74a:	87 95       	ror	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f1 11       	cpse	r31, r1
 754:	f8 cf       	rjmp	.-16     	; 0x746 <__floatsisf+0x1c>
 756:	fa f4       	brpl	.+62     	; 0x796 <__floatsisf+0x6c>
 758:	bb 0f       	add	r27, r27
 75a:	11 f4       	brne	.+4      	; 0x760 <__floatsisf+0x36>
 75c:	60 ff       	sbrs	r22, 0
 75e:	1b c0       	rjmp	.+54     	; 0x796 <__floatsisf+0x6c>
 760:	6f 5f       	subi	r22, 0xFF	; 255
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	8f 4f       	sbci	r24, 0xFF	; 255
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	16 c0       	rjmp	.+44     	; 0x796 <__floatsisf+0x6c>
 76a:	88 23       	and	r24, r24
 76c:	11 f0       	breq	.+4      	; 0x772 <__floatsisf+0x48>
 76e:	96 e9       	ldi	r25, 0x96	; 150
 770:	11 c0       	rjmp	.+34     	; 0x794 <__floatsisf+0x6a>
 772:	77 23       	and	r23, r23
 774:	21 f0       	breq	.+8      	; 0x77e <__floatsisf+0x54>
 776:	9e e8       	ldi	r25, 0x8E	; 142
 778:	87 2f       	mov	r24, r23
 77a:	76 2f       	mov	r23, r22
 77c:	05 c0       	rjmp	.+10     	; 0x788 <__floatsisf+0x5e>
 77e:	66 23       	and	r22, r22
 780:	71 f0       	breq	.+28     	; 0x79e <__floatsisf+0x74>
 782:	96 e8       	ldi	r25, 0x86	; 134
 784:	86 2f       	mov	r24, r22
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	2a f0       	brmi	.+10     	; 0x796 <__floatsisf+0x6c>
 78c:	9a 95       	dec	r25
 78e:	66 0f       	add	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	da f7       	brpl	.-10     	; 0x78c <__floatsisf+0x62>
 796:	88 0f       	add	r24, r24
 798:	96 95       	lsr	r25
 79a:	87 95       	ror	r24
 79c:	97 f9       	bld	r25, 7
 79e:	08 95       	ret

000007a0 <__fp_split3>:
 7a0:	57 fd       	sbrc	r21, 7
 7a2:	90 58       	subi	r25, 0x80	; 128
 7a4:	44 0f       	add	r20, r20
 7a6:	55 1f       	adc	r21, r21
 7a8:	59 f0       	breq	.+22     	; 0x7c0 <__fp_splitA+0x10>
 7aa:	5f 3f       	cpi	r21, 0xFF	; 255
 7ac:	71 f0       	breq	.+28     	; 0x7ca <__fp_splitA+0x1a>
 7ae:	47 95       	ror	r20

000007b0 <__fp_splitA>:
 7b0:	88 0f       	add	r24, r24
 7b2:	97 fb       	bst	r25, 7
 7b4:	99 1f       	adc	r25, r25
 7b6:	61 f0       	breq	.+24     	; 0x7d0 <__fp_splitA+0x20>
 7b8:	9f 3f       	cpi	r25, 0xFF	; 255
 7ba:	79 f0       	breq	.+30     	; 0x7da <__fp_splitA+0x2a>
 7bc:	87 95       	ror	r24
 7be:	08 95       	ret
 7c0:	12 16       	cp	r1, r18
 7c2:	13 06       	cpc	r1, r19
 7c4:	14 06       	cpc	r1, r20
 7c6:	55 1f       	adc	r21, r21
 7c8:	f2 cf       	rjmp	.-28     	; 0x7ae <__fp_split3+0xe>
 7ca:	46 95       	lsr	r20
 7cc:	f1 df       	rcall	.-30     	; 0x7b0 <__fp_splitA>
 7ce:	08 c0       	rjmp	.+16     	; 0x7e0 <__fp_splitA+0x30>
 7d0:	16 16       	cp	r1, r22
 7d2:	17 06       	cpc	r1, r23
 7d4:	18 06       	cpc	r1, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	f1 cf       	rjmp	.-30     	; 0x7bc <__fp_splitA+0xc>
 7da:	86 95       	lsr	r24
 7dc:	71 05       	cpc	r23, r1
 7de:	61 05       	cpc	r22, r1
 7e0:	08 94       	sec
 7e2:	08 95       	ret

000007e4 <__fp_zero>:
 7e4:	e8 94       	clt

000007e6 <__fp_szero>:
 7e6:	bb 27       	eor	r27, r27
 7e8:	66 27       	eor	r22, r22
 7ea:	77 27       	eor	r23, r23
 7ec:	cb 01       	movw	r24, r22
 7ee:	97 f9       	bld	r25, 7
 7f0:	08 95       	ret

000007f2 <__mulsf3>:
 7f2:	0e 94 0c 04 	call	0x818	; 0x818 <__mulsf3x>
 7f6:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_round>
 7fa:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_pscA>
 7fe:	38 f0       	brcs	.+14     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 800:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_pscB>
 804:	20 f0       	brcs	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 806:	95 23       	and	r25, r21
 808:	11 f0       	breq	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_inf>
 80e:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_nan>
 812:	11 24       	eor	r1, r1
 814:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_szero>

00000818 <__mulsf3x>:
 818:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fp_split3>
 81c:	70 f3       	brcs	.-36     	; 0x7fa <__mulsf3+0x8>

0000081e <__mulsf3_pse>:
 81e:	95 9f       	mul	r25, r21
 820:	c1 f3       	breq	.-16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 822:	95 0f       	add	r25, r21
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	55 1f       	adc	r21, r21
 828:	62 9f       	mul	r22, r18
 82a:	f0 01       	movw	r30, r0
 82c:	72 9f       	mul	r23, r18
 82e:	bb 27       	eor	r27, r27
 830:	f0 0d       	add	r31, r0
 832:	b1 1d       	adc	r27, r1
 834:	63 9f       	mul	r22, r19
 836:	aa 27       	eor	r26, r26
 838:	f0 0d       	add	r31, r0
 83a:	b1 1d       	adc	r27, r1
 83c:	aa 1f       	adc	r26, r26
 83e:	64 9f       	mul	r22, r20
 840:	66 27       	eor	r22, r22
 842:	b0 0d       	add	r27, r0
 844:	a1 1d       	adc	r26, r1
 846:	66 1f       	adc	r22, r22
 848:	82 9f       	mul	r24, r18
 84a:	22 27       	eor	r18, r18
 84c:	b0 0d       	add	r27, r0
 84e:	a1 1d       	adc	r26, r1
 850:	62 1f       	adc	r22, r18
 852:	73 9f       	mul	r23, r19
 854:	b0 0d       	add	r27, r0
 856:	a1 1d       	adc	r26, r1
 858:	62 1f       	adc	r22, r18
 85a:	83 9f       	mul	r24, r19
 85c:	a0 0d       	add	r26, r0
 85e:	61 1d       	adc	r22, r1
 860:	22 1f       	adc	r18, r18
 862:	74 9f       	mul	r23, r20
 864:	33 27       	eor	r19, r19
 866:	a0 0d       	add	r26, r0
 868:	61 1d       	adc	r22, r1
 86a:	23 1f       	adc	r18, r19
 86c:	84 9f       	mul	r24, r20
 86e:	60 0d       	add	r22, r0
 870:	21 1d       	adc	r18, r1
 872:	82 2f       	mov	r24, r18
 874:	76 2f       	mov	r23, r22
 876:	6a 2f       	mov	r22, r26
 878:	11 24       	eor	r1, r1
 87a:	9f 57       	subi	r25, 0x7F	; 127
 87c:	50 40       	sbci	r21, 0x00	; 0
 87e:	9a f0       	brmi	.+38     	; 0x8a6 <__mulsf3_pse+0x88>
 880:	f1 f0       	breq	.+60     	; 0x8be <__mulsf3_pse+0xa0>
 882:	88 23       	and	r24, r24
 884:	4a f0       	brmi	.+18     	; 0x898 <__mulsf3_pse+0x7a>
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	bb 1f       	adc	r27, r27
 88c:	66 1f       	adc	r22, r22
 88e:	77 1f       	adc	r23, r23
 890:	88 1f       	adc	r24, r24
 892:	91 50       	subi	r25, 0x01	; 1
 894:	50 40       	sbci	r21, 0x00	; 0
 896:	a9 f7       	brne	.-22     	; 0x882 <__mulsf3_pse+0x64>
 898:	9e 3f       	cpi	r25, 0xFE	; 254
 89a:	51 05       	cpc	r21, r1
 89c:	80 f0       	brcs	.+32     	; 0x8be <__mulsf3_pse+0xa0>
 89e:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_inf>
 8a2:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_szero>
 8a6:	5f 3f       	cpi	r21, 0xFF	; 255
 8a8:	e4 f3       	brlt	.-8      	; 0x8a2 <__mulsf3_pse+0x84>
 8aa:	98 3e       	cpi	r25, 0xE8	; 232
 8ac:	d4 f3       	brlt	.-12     	; 0x8a2 <__mulsf3_pse+0x84>
 8ae:	86 95       	lsr	r24
 8b0:	77 95       	ror	r23
 8b2:	67 95       	ror	r22
 8b4:	b7 95       	ror	r27
 8b6:	f7 95       	ror	r31
 8b8:	e7 95       	ror	r30
 8ba:	9f 5f       	subi	r25, 0xFF	; 255
 8bc:	c1 f7       	brne	.-16     	; 0x8ae <__mulsf3_pse+0x90>
 8be:	fe 2b       	or	r31, r30
 8c0:	88 0f       	add	r24, r24
 8c2:	91 1d       	adc	r25, r1
 8c4:	96 95       	lsr	r25
 8c6:	87 95       	ror	r24
 8c8:	97 f9       	bld	r25, 7
 8ca:	08 95       	ret

000008cc <__fp_inf>:
 8cc:	97 f9       	bld	r25, 7
 8ce:	9f 67       	ori	r25, 0x7F	; 127
 8d0:	80 e8       	ldi	r24, 0x80	; 128
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	08 95       	ret

000008d8 <__fp_nan>:
 8d8:	9f ef       	ldi	r25, 0xFF	; 255
 8da:	80 ec       	ldi	r24, 0xC0	; 192
 8dc:	08 95       	ret

000008de <__fp_pscA>:
 8de:	00 24       	eor	r0, r0
 8e0:	0a 94       	dec	r0
 8e2:	16 16       	cp	r1, r22
 8e4:	17 06       	cpc	r1, r23
 8e6:	18 06       	cpc	r1, r24
 8e8:	09 06       	cpc	r0, r25
 8ea:	08 95       	ret

000008ec <__fp_pscB>:
 8ec:	00 24       	eor	r0, r0
 8ee:	0a 94       	dec	r0
 8f0:	12 16       	cp	r1, r18
 8f2:	13 06       	cpc	r1, r19
 8f4:	14 06       	cpc	r1, r20
 8f6:	05 06       	cpc	r0, r21
 8f8:	08 95       	ret

000008fa <__fp_round>:
 8fa:	09 2e       	mov	r0, r25
 8fc:	03 94       	inc	r0
 8fe:	00 0c       	add	r0, r0
 900:	11 f4       	brne	.+4      	; 0x906 <__stack+0x7>
 902:	88 23       	and	r24, r24
 904:	52 f0       	brmi	.+20     	; 0x91a <__stack+0x1b>
 906:	bb 0f       	add	r27, r27
 908:	40 f4       	brcc	.+16     	; 0x91a <__stack+0x1b>
 90a:	bf 2b       	or	r27, r31
 90c:	11 f4       	brne	.+4      	; 0x912 <__stack+0x13>
 90e:	60 ff       	sbrs	r22, 0
 910:	04 c0       	rjmp	.+8      	; 0x91a <__stack+0x1b>
 912:	6f 5f       	subi	r22, 0xFF	; 255
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	08 95       	ret

0000091c <strcmp>:
 91c:	fb 01       	movw	r30, r22
 91e:	dc 01       	movw	r26, r24
 920:	8d 91       	ld	r24, X+
 922:	01 90       	ld	r0, Z+
 924:	80 19       	sub	r24, r0
 926:	01 10       	cpse	r0, r1
 928:	d9 f3       	breq	.-10     	; 0x920 <strcmp+0x4>
 92a:	99 0b       	sbc	r25, r25
 92c:	08 95       	ret

0000092e <strcpy>:
 92e:	fb 01       	movw	r30, r22
 930:	dc 01       	movw	r26, r24
 932:	01 90       	ld	r0, Z+
 934:	0d 92       	st	X+, r0
 936:	00 20       	and	r0, r0
 938:	e1 f7       	brne	.-8      	; 0x932 <strcpy+0x4>
 93a:	08 95       	ret

0000093c <_exit>:
 93c:	f8 94       	cli

0000093e <__stop_program>:
 93e:	ff cf       	rjmp	.-2      	; 0x93e <__stop_program>
